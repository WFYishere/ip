plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'checkstyle'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly  'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    String javaFxVersion = '17.0.7'

    implementation group: 'org.openjfx', name: 'javafx-base',     version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base',     version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base',     version: javaFxVersion, classifier: 'linux'

    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'

    implementation group: 'org.openjfx', name: 'javafx-fxml',     version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml',     version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml',     version: javaFxVersion, classifier: 'linux'

    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
}


checkstyle {
    toolVersion = '10.12.4'
    maxWarnings = 0
    config = resources.text.fromString(
        '''<?xml version="1.0" encoding="UTF-8"?>
           <!DOCTYPE module PUBLIC
             "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
             "https://checkstyle.org/dtds/configuration_1_3.dtd">
           <module name="Checker">
             <module name="TreeWalker">
               <module name="NeedBraces"/>
             </module>
           </module>'''
    )
}


tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required.set(false)
        html.required.set(true)
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"

        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

application {
    mainClass.set('quokka.Launcher')
}

jar {
    manifest {
        attributes('Main-Class': application.mainClass.get())
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

shadowJar {
    archiveFileName = 'Duke.jar'
    archiveClassifier = null
    manifest {
        attributes('Main-Class': application.mainClass.get())
    }
}


run{
    standardInput = System.in
}
